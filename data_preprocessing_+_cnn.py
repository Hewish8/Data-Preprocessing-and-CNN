# -*- coding: utf-8 -*-
"""Data Preprocessing + CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jr_AvhXX4Qo9iKWgWwQA3xuvsG7mtw7_

**To make directory on PC and split train.zip**
"""

#import os, shutil

#original_dataset_dir = 'dataset'

#Create Base Directory
#base_dir = 'cats_and_dogs_small'
#os.mkdir(base_dir)

#Create train and validation directories
#train_cats_dir = os.path.join(train_dir,'cats')
#os.mkdir(train_cats_dir)

#train_dogs_dir = os.path.join(train_dir,'dogs')
#os.mkdir(train_dogs_dir)

"""**Mounting Drive**"""

from google.colab import drive
drive.mount('/content/drive')

"""**To Find, Change and Create directory on Colab**"""

# Commented out IPython magic to ensure Python compatibility.
#To list all file names in a folder
#import os
#fileNames = os.listdir('/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset')
#print(fileNames)
#To find the current folder path
#!pwd
#To create new Folder
#!mkdir my_project
#To change path
# %cd '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset'

"""**Unzipping the train file**"""

from zipfile import ZipFile
file_name = "train.zip"

with ZipFile(file_name, 'r') as zip:
  zip.extractall()
  print("Done")

# Commented out IPython magic to ensure Python compatibility.
#Create a Cat folder
# %cd '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset'
!mkdir train_dir
# %cd '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train_dir'
!mkdir cats

# Commented out IPython magic to ensure Python compatibility.
#Create a Dog Folder
# %cd "/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train_dir"
!mkdir dogs

#PC VERSION
#Copy first 200 cat images directory
#fnames = ['cat.{}.jpg'.format(i)for i in range(200)]
#for fname in fnames:
  #src = os.path.join(original_dataset_dir,fname)
  #dst = os.path.join(train_cats_dir,fname)
  #shutil.copyfile(src, dst )

#Copy first 200 dog images directory
#fnames = ['dog.{}.jpg'.format(i)for i in range(200)]
#for fname in fnames:
  #src = os.path.join(original_dataset_dir,fname)
  #dst = os.path.join(train_dogs_dir,fname)
  #shutil.copyfile(src, dst )

"""**Copy cats pics to Cats Folder**"""

# Commented out IPython magic to ensure Python compatibility.
#Copy first 1000 cat images directory

# %cd '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset'

import os, shutil

for i in range(1000):
  src = '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train/cat.{}.jpg'.format(i)
  dst = '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train_dir/cats/cat.{}.jpg'.format(i)
  shutil.copyfile(src, dst )

"""**Copy dogs pics to Dogs Folder**"""

# Commented out IPython magic to ensure Python compatibility.
#Copy first 1000 dog images directory

# %cd '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset'

for i in range(1000):
  src = '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train/dog.{}.jpg'.format(i)
  dst = '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train_dir/dogs/dog.{}.jpg'.format(i)
  shutil.copyfile(src, dst )

"""**Image Preprocessing**"""

train_dir = '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train_dir'

from tensorflow.keras.preprocessing.image import ImageDataGenerator

#Scaling all Images
train_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    color_mode = 'grayscale',
    target_size = (100,100),
    batch_size = 1000,
    class_mode = 'binary') #binary means eiteer cat or dog

print(train_generator.class_indices)

"""**Install Pillow Library-** adds image processing capabilities to Python Interpreter"""

pip install pillow

#To return a batch in each iteration- here only one batch of 1000 so do once
type(train_generator)

#Process training data and labels
training_data, training_labels = next(train_generator)

print('data batch shape:', training_data.shape)
print("labels batch shape:", training_labels.shape)

"""**Building CNN**"""

#Importing the model and Layers

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

#Building Model
model = Sequential()

#Convolution and MaxPooling

model.add(Conv2D(32,(3,3),activation= 'relu', input_shape = (100,100,1)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3),activation= 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(128,(3,3),activation= 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(128,(3,3),activation= 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#Flatten and Dense Layer
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid')) # one output since binary problem

model.summary()

#Compile the model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['acc'])

"""**Training the Model**"""

history = model.fit(training_data, training_labels, validation_split = 0.2, epochs=30)
#history = model.fit_generator(train_generator, steps_per_epoch= , epochs= , validation_data = , validation_steps =  )

"""**Predict an Image**-from training data"""

INDEX = 80
test_image = training_data[INDEX]
#print(test_image.shape)
prediction = model.predict_classes([test_image.reshape(1,100,100,1)])
predicted_class = prediction[0][0]
print('\n\n')
print('predicted class:', predicted_class)
print('\n\n')

print('labels', train_generator.class_indices)

import matplotlib.pyplot as plt

plt.imshow(training_data[INDEX][:,:,0], cmap = plt.cm.binary)

"""**Predict an image**-from the other image in train dataset"""

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/My Drive/Colab Notebooks/Cats_and_Dogs Dataset/train'
import cv2
import tensorflow as tf

CATEGORIES = ["Cat", "Dog"]

def prepare(filepath):
  IMG_SIZE = 100
  img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
  new_array = cv2.resize(img_array, (IMG_SIZE,IMG_SIZE))
  return new_array.reshape(1,IMG_SIZE, IMG_SIZE,1)

prediction = model.predict([prepare('cat.200.jpg')]) # Can put dog directly since directory changed above with %cd

#print(prediction)
print('Animal Category is:', CATEGORIES[int(prediction[0][0])])

"""**Predict an Image**- from uploaded file"""

from google.colab import files
file = files.upload()

import cv2
import tensorflow as tf

CATEGORIES = ["Cat", "Dog"]

def prepare(file):
  IMG_SIZE = 100
  img_array = cv2.imread(file, cv2.IMREAD_GRAYSCALE)
  new_array = cv2.resize(img_array, (IMG_SIZE,IMG_SIZE))
  return new_array.reshape(1,IMG_SIZE, IMG_SIZE,1)

prediction = model.predict([prepare('dogy.jpg')]) # Can put dog directly since directory changed above with %cd

#print(prediction)
print('Animal Category is:', CATEGORIES[int(prediction[0][0])])